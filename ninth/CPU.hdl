// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	And16(a=instruction, b=true, out=nopA,
      out[15]=opcode, out[12]=instA, 
      out[6..11]=instC, out[3..5]=instD, out[0..2]=instJ);

And16(a[0..5]=instC, a[6..15]=true, b=true, out=nopB,
      out[5]=zx, out[4]=nx, 
      out[3]=zy, out[2]=ny,
      out[1]=f, out[0]=no);

And16(a[0..2]=instD, a[3..15]=true, b=true, out=nopC,
      out[0]=tryStoreM, out[1]=tryStoreD, out[2]=tryStoreA);

Mux16(a=instruction, b=outALU, sel=opcode, out=inAReg);

Not(in=opcode, out=aInst);
Or(a=aInst, b=tryStoreA, out=loadAReg);
ARegister(in=inAReg, load=loadAReg, out=outAReg);

And(a=tryStoreD, b=opcode, out=loadD);
DRegister(in=outALU, load=loadD, out=outDReg, out=xALU);

Mux16(a=outAReg, b=inM, sel=instA, out=yALU);

ALU(x=xALU, y=yALU,
    zx=zx, nx=nx, zy=zy, ny=ny,
    f=f, no=no,
    out=outALU, zr=zr, ng=ng);

DMux8Way(in=true, sel=instJ,
         a=noJmp, b=jGT, c=jEQ, d=jGE,
         e=jLT, f=jNE, g=jLE, h=uncJmp);

Not(in=zr, out=notZR);
Not(in=ng, out=notNG);

And(a=notZR, b=notNG, out=positiveOut);
And(a=notZR, b=ng, out=negativeOut);
And(a=zr, b=notNG, out=zeroOut);

And(a=positiveOut, b=true, out=GT);
And(a=zeroOut, b=true, out=EQ);
And(a=negativeOut, b=true, out=LT);

Or(a=GT, b=EQ, out=GE);
Or(a=GT, b=LT, out=NE);
Or(a=LT, b=EQ, out=LE);

And(a=jGT, b=GT, out=jmpGT);
And(a=jEQ, b=EQ, out=jmpEQ);
And(a=jGE, b=GE, out=jmpGE);
And(a=jLT, b=LT, out=jmpLT);
And(a=jNE, b=NE, out=jmpNE);
And(a=jLE, b=LE, out=jmpLE);

Or8Way(in[0]=false, in[1]=jmpGT, in[2]=jmpEQ, in[3]=jmpGE,
       in[4]=jmpLT, in[5]=jmpNE, in[6]=jmpLE, in[7]=uncJmp,
       out=tryJmp);

And(a=tryJmp, b=opcode, out=loadPC);

PC(in=outAReg, load=loadPC, inc=true, reset=reset, out=oldPC);

And16(a=outALU, b=true, out=outM);
And(a=tryStoreM, b=opcode, out=writeM);
And16(a=outAReg, b=true, out=nopD, out[0..14]=addressM);
And16(a=oldPC, b=true, out=nopE, out[0..14]=pc);

}